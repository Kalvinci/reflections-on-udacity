1.What happens when you initialize a repository? Why do you need to do it?

Just some meta data files are added to the repository. We need to initialize a repository so as to use the powers of git version control.


2.How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area is the place where we add files that are to be committed. The staging area is a virtual place where push all the upcoming commits whereas directory and repository are actual places where we create files, edit them.

3.How can you use the staging area to make sure you have one commit per logical change?

Well, the git staging area has got the changes that we have added through git add. Now, this can be compared with both the working directory as well as repository to find out whether the subsequent commit is a logical change or not.

4.What are some situations when branches would be helpful in keeping your history organized? How would branches help?

A situation where one has to create multiple versions of the same project then branching would come handy. As a branch has completely separate copy of the master, it is less riskier to play with our code. As far as history is concerned each branch has its own log of history.

5.How do the diagrams help you visualize the branch structure?

Drawing the diagrams helps to visualize how the commits are made, which commits are non reachable and the sequence that will be shown by git log.

6.What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

All the changes made in both the files which do not involve in any conflict will be in the final file. We represent it in the diagram to keep track of parent commits.

7.What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

pros : Less headache for the user.
cons : maybe what user wanted wont happen. 

Note :
branches are actually just the labels to commits and whenever we checkout a branch and make commits to it the branch name is carried forward with the commit keeping the branch updated.

Commands :

1. git init
2. git add
3. git commit -m "any message"
4. git status
5. git diff (without any arguments to compare the working directory and the staging area)
6. git diff --staged (to compare the staging area and the recent commit in the repository)
7. git reset --hard (discards the changes in both working directory and staging area)
8. git branch (without any arguments will display the existing branches in the repository)
9. git branch branch-name (will create a branch with branch-name as name)
10. git log --graph --oneline branch-name-1 branch-name-2 (to visualize the log of the commits in the branches)
11. git merge branch-name-1 branch-name-2
12. git show commitid (to see what is the differnce between commitid commit and its parent commit -- very useful after merges)
13. git branch -d branch-name (to delete a branch)